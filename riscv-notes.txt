# RAIM

source ~/toolchains/riscv/setpath.sh
cd RAIM
autoreconf --install && ./configure ARCH=riscv MACH=riscv-virt --host=riscv64-unknown-elf --disable-wextra --disable-waddress --disable-wconversion
make




# bbl (should build RAIM bootloader first)

source ~/toolchains/riscv/setpath.sh
cd riscv-pk
mkdir build
cd build
../configure --host=riscv64-unknown-elf --enable-print-device-tree --enable-logo --with-payload=../../RAIM/boot/boot.bin
cp /home/zby/src/riscv-aim/v6/V6FS/v6bin v6bin && make && qemu-system-riscv64 -m 1024 -drive file=disk.raw,format=raw,id=hd0 -device virtio-blk-device,drive=hd0 -nographic -machine virt -kernel bbl -initrd ../../RAIM/kern/vmraim.elf -d guest_errors




//// 文档

bbl: 第一阶段启动，负责从machine mode进入supervisor mode；另外提供一些实用功能（如打印字符、关机等）；在编译时要用--with-payload=../../RAIM/boot/boot.bin把我们的raim-bootloader加进去
raim-bootloader：负责加载RAIM的ELF文件


 CSR Field Specifications (riscv-privileged-v1.10.pdf)
WIRI Writes-Ignored, Reads-Ignore field
WPRI Writes-Preserve Reads-Ignore field.
WLRL Write-Legal, Read-Legal field.
WARL Write-Any Read-Legal field.


AS_VAR_SET([__with_ram_physbase], [0x0000000080000000])  RAM_PHYSBASE
AS_VAR_SET([__with_kern_start],   [0x0000000082000000])  KERN_START
AS_VAR_SET([__with_kern_base],    [0xffffffe002000000])  KERN_BASE
AS_VAR_SET([__with_mem_size],     [0x0000000010000000])  MEM_SIZE



trap: sscratch寄存器是0则表示trap从内核中来，非0则表示从用户态来（其中存的值是内核的sp），与bbl大致相同
手册中trap相关描述在M-mode 3.1.7 ; S-mode 4.1.1


运行V6FS.exe（https://bitbucket.org/7shi/v6fs/downloads/）
sudo apt-get install mono-complete
