/* Copyright (C) 2016 Gan Quan <coin2028@hotmail.com>
 *
 * This file is part of RAIM.
 *
 * RAIM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RAIM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <asm.h>
#include <regdef.h>
#include <cp0regdef.h>
#include <arch-smp.h>
#include <stack.h>
#include <util.h>

/*
 * General exception handler entry
 *
 * This function is to be copied to the processor general exception
 * handler entry at EBASE + 0x180 (usually 0x80000180).
 */
BEGIN(generic_exception_entry)
	.set	push
	.set	noat
	cpuid	k0, k1
	/*
	 * Ugly hack to save gp and sp for each CPU temporarily, as PIC code
	 * requires GP to work.  This hack allows minimal(?) position
	 * dependency.
	 *
	 * Address for temporary gp slot:
	 * GP_SLOT_BASE + CPUID * WORD_SIZE
	 *
	 * This hack requires the kernel not to load at places immediately
	 * above exception handler entries (i.e. 0x80000180).
	 *
	 * Also, this hack requires the kernel not to use interrupt vectors
	 * (i.e. IV bit in CAUSE register is 0), which is not used by
	 * most OS kernels anyway.  If someone wants to try interrupt vectors,
	 * change GP_SLOT_BASE in configure to a suitable address.
	 *
	 * [EDIT] GP_SLOT_BASE is no longer needed now.
	 */
	lui	k0, %hi(_gp)
	ADDIU	k0, %lo(_gp)
	LOAD	k0, %got(__generic_exception_entry)(k0)
	jr	k0
	.set	pop
END(generic_exception_entry)

BEGIN(__generic_exception_entry)
	.set	push
	.set	noat
	/* Check whether the exception is thrown from kernel or user */
	mfc0	k0, CP0_STATUS
	and	k0, ST_KSU
	/* Save old SP */
	move	k1, sp
	beqz	k0, 8f
	/* If thrown from user, switch to kernel stack.
	 * Note that SP is already saved to the temporary slot. */
	get_saved_sp sp, k0
8:	/* Do the job. */
	/*
	 * NOTE: this implementation is rather inefficient as each
	 * PUSH and POP consists of two instructions.
	 * One can surely allocate the entire structure and fill it
	 * with pre-defined offsets:
	 *
	 *     SUBU	sp, TF_SIZE
	 *     STORE	a0, TF_A0(sp)
	 *     STORE	a1, TF_A1(sp)
	 *     STORE	a2, TF_A2(sp)
	 *
	 * However, this requires that the offsets should be either
	 * handwritten, or automatically generated by a helper C code.
	 * And since we are presenting a teaching OS here, we don't care
	 * too much on efficiency.
	 *
	 * If this project becomes production-oriented, I would recommend
	 * using pre-defined offsets, though.
	 */
	PUSHCOPR k0
	PUSH	ra
	PUSH	s8
	PUSH	k1	/* k1 holds old SP */
	PUSH	gp
	PUSH	k1
	PUSH	k0
	PUSH	t9
	PUSH	t8
	PUSHAL

	/* Switch to kernel mode with no EXL on to allow nested exception */
	mfc0	k0, CP0_STATUS
	or	k0, ST_EXCM
	xor	k0, ST_EXCM
	mtc0	k0, CP0_STATUS
	move	a0, sp
	lui	gp, %hi(_gp)
	ADDIU	gp, %lo(_gp)
#ifndef __LP64__
	/*
	 * MIPS32 ABI requires reserving four words (16 bytes) in stack frame
	 * whenever you make a function call, even if you would access the
	 * arguments by registers a0..a3.
	 * MIPS64 ABI does not have such requirement.
	 */
	SUBU	sp, 16
#endif
	/*
	 * .cprestore just to supress warning. Same as above.
	 */
	.cprestore
	jal	trap_handler
	.set	pop
END(__generic_exception_entry)

BEGIN(trap_exit)
	.set	push
	.set	noat
	move	sp, a0
	POPAL
	POP	t8
	POP	t9
	POP	k0
	POP	k1
	POP	gp
	POP	k0	/* temporarily hold SP */
	POP	s8
	POP	ra
	POPCOPR k1
	move	sp, k0	/* restore SP */
	eret
	.set	pop
END(trap_exit)
